# /home/dylan/code/work/labelwall/docker-compose.yml
# version: '3.8' # Removed obsolete version line

services:
  neo4j:
    image: neo4j:5 # 使用 Neo4j 5.x 官方镜像
    container_name: labelwall-neo4j-test
    ports:
      - "7474:7474" # Neo4j Browser HTTP
      - "7687:7687" # Bolt protocol
    environment:
      # 设置默认用户名 neo4j，密码 password (仅用于测试环境)
      # 首次启动后，你可能需要在浏览器 (http://localhost:7474) 修改密码
      NEO4J_AUTH: neo4j/password
      # 接受许可协议 (对于较新版本是必需的)
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      # 禁用初始密码修改强制要求
      NEO4J_dbms_security_auth__minimum__password__length: "4"
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,algo.*"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*,algo.*"
      NEO4J_dbms_connector_bolt_advertised__address: "localhost:7687"
      NEO4J_dbms_connector_http_advertised__address: "localhost:7474"
      # 可选：禁用初始密码修改强制要求 (方便测试)
      # NEO4J_dbms_security_auth__enabled: false # 完全禁用认证 (不推荐，除非有特殊原因)
    # volumes:
      # 可选：如果你希望在 docker compose down/up 之间持久化数据，请取消注释以下行
      # - neo4j_data:/data
      # - neo4j_logs:/logs
      # - neo4j_import:/var/lib/neo4j/import
      # - neo4j_plugins:/var/lib/neo4j/plugins
      # - neo4j_conf:/var/lib/neo4j/conf
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7 # 使用 Redis 7.x 官方镜像
    container_name: labelwall-redis-test
    ports:
      - "6381:6379" # Map container port 6379 to host port 6380
    # 可选：如果你希望在 docker-compose down/up 之间持久化数据
    # volumes:
    #  - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.37.8  # 使用较老但稳定的版本
    container_name: labelwall-prometheus
    ports:
      - "9092:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml # 修正了路径中的拼写错误
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    # depends_on: # 如果您的应用也在 docker-compose 中，可以在这里添加依赖
      # app:
        # condition: service_healthy

  grafana:
    image: grafana/grafana:11.3.0  # 使用最新版本
    container_name: labelwall-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana # 持久化 Grafana 数据
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # 建议更改默认密码
      # - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource # 如果需要可以预装插件
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      prometheus:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3.13-management # 使用带有管理插件的 RabbitMQ 镜像
    container_name: labelwall-rabbitmq
    hostname: rabbitmq # 设置 hostname，方便内部通信
    ports:
      - "5672:5672"   # AMQP 协议端口
      - "15672:15672" # 管理界面 HTTP 端口
    environment:
      RABBITMQ_DEFAULT_USER: "labelwall_user" # 默认用户名
      RABBITMQ_DEFAULT_PASS: "labelwall_pass" # 默认密码 (请在生产环境中更改)
      # RABBITMQ_DEFAULT_VHOST: "labelwall_vhost" # 可以定义一个虚拟主机，如果需要隔离
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # 持久化 RabbitMQ 数据
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  nginx:
    image: nginx:latest
    container_name: labelwall-nginx-proxy
    ports:
      - "8083:80" # 将主机的端口更改为 8083
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # 挂载Nginx配置文件 (只读)
      - nginx_cache_data:/var/cache/nginx/network_cache     # 挂载缓存数据卷
      - nginx_log_data:/var/log/nginx                       # 挂载日志数据卷
    # depends_on 和 app 健康检查已移除，因为 app 不在 compose 管理范围内
    # 如果您的 Go 应用启动较慢，Nginx 可能会在 Go 应用就绪前尝试连接并失败。
    # 您可能需要手动确保 Go 应用已启动，或者为 Nginx 添加更复杂的启动延迟/重试逻辑 (通常在入口脚本中完成)
    healthcheck:
      # 使用 curl (GET 请求) 检查 /ping 端点是否返回 200 OK
      test: ["CMD-SHELL", "curl --fail --silent http://172.17.0.1:8888/ping -o /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    extra_hosts:
      - "host.docker.internal:host-gateway"

#  nginx-log-exporter:
#    image: martinhelmich/prometheus-nginxlog-exporter:v1.10.0
#    container_name: labelwall-nginx-log-exporter
#    restart: unless-stopped
#    ports:
#      - "4040:4040" # Exporter 监听的端口
#    volumes:
#      - nginx_log_data:/var/log/nginx:ro # 只读挂载 Nginx 日志目录
#      - ./infrastructure/prometheus-nginxlog-exporter/config.yml:/config/config.yml:ro # 挂载 exporter 配置文件
#    depends_on:
#      - nginx
#    command: ["--config-file=/config/config.yml"]

  nginx-prometheus-exporter:
    image: nginx/nginx-prometheus-exporter:latest # 使用官方 exporter
    container_name: labelwall-nginx-prometheus-exporter
    restart: unless-stopped
    ports:
      - "9113:9113" # Exporter 默认监听端口
    command: ["-nginx.scrape-uri", "http://nginx/stub_status"]
    # 注意: "nginx" 是 docker-compose 中 nginx 服务的名称
    # Exporter 会通过内部 Docker 网络访问 nginx 服务的 stub_status 端点
    depends_on:
      - nginx

# 可选：定义命名卷以持久化数据
volumes:
#   neo4j_data:
#   neo4j_logs:
#   neo4j_import:
#   neo4j_plugins:
#   neo4j_conf:
#   redis_data:
  rabbitmq_data: {} # 为 RabbitMQ 添加数据卷
  grafana_data: {} # 为 Grafana 添加数据卷
  nginx_cache_data: {} # 为 Nginx 缓存定义命名卷
  nginx_log_data: {}   # 为 Nginx 日志定义命名卷 