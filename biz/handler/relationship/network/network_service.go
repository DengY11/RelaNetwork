// Code generated by hertz generator.

package network

import (
	"context"
	"fmt"

	network "labelwall/biz/model/relationship/network"
	"labelwall/biz/service" // Import service layer

	// "labelwall/dependency_inject" // Import DI for service initialization - Commented out for now

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Initialize service using dependency injection - Commented out for now
// var networkService service.NetworkService = dependency_inject.GetNetworkService()
var networkService service.NetworkService // Declare variable, assume initialized elsewhere

// SetNetworkService allows setting the service instance from outside the package.
// This is typically called during application initialization (e.g., in main.go).
func SetNetworkService(svc service.NetworkService) {
	if networkService != nil {
		// Optionally log a warning if the service is being reset
		fmt.Println("Warning: NetworkService is being re-initialized")
	}
	networkService = svc
}

// GetNetwork .
// @router /api/v1/network [GET]
func GetNetwork(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetNetworkRequest
	// Bind Query Params (startNodeCriteria map, depth, relationTypes, nodeTypes)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &network.GetNetworkResponse{Success: false, Message: "无效请求参数: " + err.Error()})
		return
	}

	// Call Service
	resp, err := networkService.GetNetwork(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &network.GetNetworkResponse{Success: false, Message: "获取网络图谱失败: " + err.Error()})
		return
	}

	// GetNetwork always returns OK status, even if no results found
	c.JSON(consts.StatusOK, resp)
}

// GetPath .
// @router /api/v1/path [GET]
func GetPath(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetPathRequest
	// Bind Query Params (source_id, target_id, max_depth, types)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &network.GetPathResponse{Success: false, Message: "无效请求参数: " + err.Error()})
		return
	}

	// Simple validation for required fields
	if req.SourceID == "" || req.TargetID == "" {
		c.JSON(consts.StatusBadRequest, &network.GetPathResponse{Success: false, Message: "源节点 ID 和目标节点 ID 不能为空"})
		return
	}

	// Call Service
	resp, err := networkService.GetPath(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &network.GetPathResponse{Success: false, Message: "查询路径失败: " + err.Error()})
		return
	}

	// Service handles 'Not Found' by setting Success=false
	c.JSON(consts.StatusOK, resp)
}

// SearchNodes .
// @router /api/v1/nodes/search [GET]
func SearchNodes(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.SearchNodesRequest
	// Bind Query Params (criteria map, type, limit, offset)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &network.SearchNodesResponse{Success: false, Message: "无效请求参数: " + err.Error()})
		return
	}

	// Call Service
	resp, err := networkService.SearchNodes(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &network.SearchNodesResponse{Success: false, Message: "搜索节点失败: " + err.Error()})
		return
	}

	// Search always returns OK status, even if no results found
	c.JSON(consts.StatusOK, resp)
}

// CreateNode .
// @router /api/v1/nodes [POST]
func CreateNode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.CreateNodeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &network.CreateNodeResponse{Success: false, Message: "无效请求: " + err.Error()})
		return
	}

	// Call Service
	resp, err := networkService.CreateNode(ctx, &req)
	if err != nil {
		// Handle internal server error from service
		c.JSON(consts.StatusInternalServerError, &network.CreateNodeResponse{Success: false, Message: "创建节点失败: " + err.Error()})
		return
	}

	// Handle service-level logical errors (though CreateNode usually returns success or internal error)
	if !resp.Success {
		// Assuming CreateNode failures indicated by Success=false are likely due to bad input or conflicts
		// Return Bad Request status based on README expectations for creation failures
		c.JSON(consts.StatusBadRequest, resp) // Or StatusConflict if appropriate
		return
	}

	// Success - README specifies 200 OK for successful creation
	c.JSON(consts.StatusOK, resp)
}

// GetNode .
// @router /api/v1/nodes/:id [GET]
func GetNode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetNodeRequest
	// Bind Path Param "id"
	req.ID = c.Param("id") // Assuming ID is passed as a path parameter :id
	// Validate if ID is present (simple validation)
	if req.ID == "" {
		c.JSON(consts.StatusBadRequest, &network.GetNodeResponse{Success: false, Message: "节点 ID 不能为空"})
		return
	}

	// Call Service
	resp, err := networkService.GetNode(ctx, &req)
	if err != nil {
		// Handle internal server error from service
		c.JSON(consts.StatusInternalServerError, &network.GetNodeResponse{Success: false, Message: "获取节点失败: " + err.Error()})
		return
	}

	// Handle service-level logical errors (e.g., Not Found)
	if !resp.Success {
		// Check if it's a "Not Found" scenario based on service message or a dedicated field if added
		// Assuming service message indicates not found clearly as per service implementation.
		// README specifies 200 OK for GetNode, so we return OK even if not found.
		c.JSON(consts.StatusOK, resp)
		return
	}

	// Success
	c.JSON(consts.StatusOK, resp)
}

// UpdateNode .
// @router /api/v1/nodes/:id [PUT]
func UpdateNode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.UpdateNodeRequest

	// Bind Path Param "id"
	req.ID = c.Param("id")
	if req.ID == "" {
		c.JSON(consts.StatusBadRequest, &network.UpdateNodeResponse{Success: false, Message: "节点 ID 不能为空"})
		return
	}

	// Bind JSON Body for other fields
	if err = c.BindAndValidate(&req); err != nil {
		c.JSON(consts.StatusBadRequest, &network.UpdateNodeResponse{Success: false, Message: "无效请求体: " + err.Error()})
		return
	}

	// Call Service
	resp, err := networkService.UpdateNode(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &network.UpdateNodeResponse{Success: false, Message: "更新节点失败: " + err.Error()})
		return
	}

	// Handle Not Found (Success=false from service)
	if !resp.Success {
		// README implies 200 OK for Update even if not found, with Success=false in body.
		c.JSON(consts.StatusOK, resp)
		return
	}

	// Success
	c.JSON(consts.StatusOK, resp)
}

// DeleteNode .
// @router /api/v1/nodes/:id [DELETE]
func DeleteNode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.DeleteNodeRequest
	// Bind Path Param "id"
	req.ID = c.Param("id")
	if req.ID == "" {
		c.JSON(consts.StatusBadRequest, &network.DeleteNodeResponse{Success: false, Message: "节点 ID 不能为空"})
		return
	}

	// Call Service
	resp, err := networkService.DeleteNode(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &network.DeleteNodeResponse{Success: false, Message: "删除节点失败: " + err.Error()})
		return
	}

	// Service handles 'Not Found' by returning Success=true. README specifies 200 OK.
	c.JSON(consts.StatusOK, resp)
}

// CreateRelation .
// @router /api/v1/relations [POST]
func CreateRelation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.CreateRelationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &network.CreateRelationResponse{Success: false, Message: "无效请求: " + err.Error()})
		return
	}

	// Call Service
	resp, err := networkService.CreateRelation(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &network.CreateRelationResponse{Success: false, Message: "创建关系失败: " + err.Error()})
		return
	}

	// Handle service-level logical errors (e.g., node not found, indicated by Success=false)
	if !resp.Success {
		c.JSON(consts.StatusBadRequest, resp) // Assume failures are client errors
		return
	}

	// Success - README specifies 200 OK
	c.JSON(consts.StatusOK, resp)
}

// GetRelation .
// @router /api/v1/relations/:id [GET]
func GetRelation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetRelationRequest
	// Bind Path Param "id"
	req.ID = c.Param("id")
	if req.ID == "" {
		c.JSON(consts.StatusBadRequest, &network.GetRelationResponse{Success: false, Message: "关系 ID 不能为空"})
		return
	}

	// Call Service
	resp, err := networkService.GetRelation(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &network.GetRelationResponse{Success: false, Message: "获取关系失败: " + err.Error()})
		return
	}

	// Handle Not Found (Success=false from service). README specifies 200 OK.
	c.JSON(consts.StatusOK, resp)
}

// UpdateRelation .
// @router /api/v1/relations/:id [PUT]
func UpdateRelation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.UpdateRelationRequest

	// Bind Path Param "id"
	req.ID = c.Param("id")
	if req.ID == "" {
		c.JSON(consts.StatusBadRequest, &network.UpdateRelationResponse{Success: false, Message: "关系 ID 不能为空"})
		return
	}

	// Bind JSON Body
	if err = c.BindAndValidate(&req); err != nil {
		c.JSON(consts.StatusBadRequest, &network.UpdateRelationResponse{Success: false, Message: "无效请求体: " + err.Error()})
		return
	}

	// Call Service
	resp, err := networkService.UpdateRelation(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &network.UpdateRelationResponse{Success: false, Message: "更新关系失败: " + err.Error()})
		return
	}

	// Handle Not Found (Success=false from service). README specifies 200 OK.
	c.JSON(consts.StatusOK, resp)
}

// DeleteRelation .
// @router /api/v1/relations/:id [DELETE]
func DeleteRelation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.DeleteRelationRequest
	// Bind Path Param "id"
	req.ID = c.Param("id")
	if req.ID == "" {
		c.JSON(consts.StatusBadRequest, &network.DeleteRelationResponse{Success: false, Message: "关系 ID 不能为空"})
		return
	}

	// Call Service
	resp, err := networkService.DeleteRelation(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &network.DeleteRelationResponse{Success: false, Message: "删除关系失败: " + err.Error()})
		return
	}

	// Service handles Not Found by returning Success=true. README specifies 200 OK.
	c.JSON(consts.StatusOK, resp)
}

// GetNodeRelations .
// @router /api/v1/nodes/:node_id/relations [GET]
func GetNodeRelations(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetNodeRelationsRequest

	// Bind Path Param "node_id"
	req.NodeID = c.Param("node_id")
	if req.NodeID == "" {
		c.JSON(consts.StatusBadRequest, &network.GetNodeRelationsResponse{Success: false, Message: "节点 ID 不能为空"})
		return
	}

	// Bind Query Params (types, outgoing, incoming, limit, offset)
	if err = c.BindAndValidate(&req); err != nil {
		c.JSON(consts.StatusBadRequest, &network.GetNodeRelationsResponse{Success: false, Message: "无效请求参数: " + err.Error()})
		return
	}

	// Call Service
	resp, err := networkService.GetNodeRelations(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &network.GetNodeRelationsResponse{Success: false, Message: "获取节点关系失败: " + err.Error()})
		return
	}

	// Always return OK status, even if no relations found
	c.JSON(consts.StatusOK, resp)
}
