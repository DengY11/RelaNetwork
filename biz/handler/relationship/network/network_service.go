// Code generated by hertz generator.

package network

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	network "labelwall/biz/model/relationship/network"
)

// GetNetwork .
// @router /api/v1/network [GET]
func GetNetwork(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetNetworkRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.GetNetworkResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetPath .
// @router /api/v1/path [GET]
func GetPath(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetPathRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.GetPathResponse)

	c.JSON(consts.StatusOK, resp)
}

// SearchNodes .
// @router /api/v1/nodes/search [GET]
func SearchNodes(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.SearchNodesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.SearchNodesResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateNode .
// @router /api/v1/nodes [POST]
func CreateNode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.CreateNodeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.CreateNodeResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetNode .
// @router /api/v1/nodes/:id [GET]
func GetNode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetNodeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.GetNodeResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateNode .
// @router /api/v1/nodes/:id [PUT]
func UpdateNode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.UpdateNodeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.UpdateNodeResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteNode .
// @router /api/v1/nodes/:id [DELETE]
func DeleteNode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.DeleteNodeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.DeleteNodeResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateRelation .
// @router /api/v1/relations [POST]
func CreateRelation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.CreateRelationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.CreateRelationResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetRelation .
// @router /api/v1/relations/:id [GET]
func GetRelation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetRelationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.GetRelationResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateRelation .
// @router /api/v1/relations/:id [PUT]
func UpdateRelation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.UpdateRelationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.UpdateRelationResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteRelation .
// @router /api/v1/relations/:id [DELETE]
func DeleteRelation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.DeleteRelationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.DeleteRelationResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetNodeRelations .
// @router /api/v1/nodes/:node_id/relations [GET]
func GetNodeRelations(ctx context.Context, c *app.RequestContext) {
	var err error
	var req network.GetNodeRelationsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(network.GetNodeRelationsResponse)

	c.JSON(consts.StatusOK, resp)
}
